// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: database.proto

package databasepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbServiceClient is the client API for DbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbServiceClient interface {
	Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMessage(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error)
	GetUnviewedMessagesForReminders(ctx context.Context, in *GetUnviewedMessagesRequest, opts ...grpc.CallOption) (*GetUnviewedMessagesResponse, error)
	LogReminderSent(ctx context.Context, in *LogReminderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetReminderHistory(ctx context.Context, in *GetReminderHistoryRequest, opts ...grpc.CallOption) (*GetReminderHistoryResponse, error)
}

type dbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbServiceClient(cc grpc.ClientConnInterface) DbServiceClient {
	return &dbServiceClient{cc}
}

func (c *dbServiceClient) Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error) {
	out := new(SelectResponse)
	err := c.cc.Invoke(ctx, "/databasepb.dbService/Select", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/databasepb.dbService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetMessage(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectResponse, error) {
	out := new(SelectResponse)
	err := c.cc.Invoke(ctx, "/databasepb.dbService/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetUnviewedMessagesForReminders(ctx context.Context, in *GetUnviewedMessagesRequest, opts ...grpc.CallOption) (*GetUnviewedMessagesResponse, error) {
	out := new(GetUnviewedMessagesResponse)
	err := c.cc.Invoke(ctx, "/databasepb.dbService/GetUnviewedMessagesForReminders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) LogReminderSent(ctx context.Context, in *LogReminderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/databasepb.dbService/LogReminderSent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetReminderHistory(ctx context.Context, in *GetReminderHistoryRequest, opts ...grpc.CallOption) (*GetReminderHistoryResponse, error) {
	out := new(GetReminderHistoryResponse)
	err := c.cc.Invoke(ctx, "/databasepb.dbService/GetReminderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbServiceServer is the server API for DbService service.
// All implementations must embed UnimplementedDbServiceServer
// for forward compatibility
type DbServiceServer interface {
	Select(context.Context, *SelectRequest) (*SelectResponse, error)
	Insert(context.Context, *InsertRequest) (*emptypb.Empty, error)
	GetMessage(context.Context, *SelectRequest) (*SelectResponse, error)
	GetUnviewedMessagesForReminders(context.Context, *GetUnviewedMessagesRequest) (*GetUnviewedMessagesResponse, error)
	LogReminderSent(context.Context, *LogReminderRequest) (*emptypb.Empty, error)
	GetReminderHistory(context.Context, *GetReminderHistoryRequest) (*GetReminderHistoryResponse, error)
	mustEmbedUnimplementedDbServiceServer()
}

// UnimplementedDbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDbServiceServer struct {
}

func (UnimplementedDbServiceServer) Select(context.Context, *SelectRequest) (*SelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedDbServiceServer) Insert(context.Context, *InsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedDbServiceServer) GetMessage(context.Context, *SelectRequest) (*SelectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedDbServiceServer) GetUnviewedMessagesForReminders(context.Context, *GetUnviewedMessagesRequest) (*GetUnviewedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnviewedMessagesForReminders not implemented")
}
func (UnimplementedDbServiceServer) LogReminderSent(context.Context, *LogReminderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogReminderSent not implemented")
}
func (UnimplementedDbServiceServer) GetReminderHistory(context.Context, *GetReminderHistoryRequest) (*GetReminderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReminderHistory not implemented")
}
func (UnimplementedDbServiceServer) mustEmbedUnimplementedDbServiceServer() {}

// UnsafeDbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbServiceServer will
// result in compilation errors.
type UnsafeDbServiceServer interface {
	mustEmbedUnimplementedDbServiceServer()
}

func RegisterDbServiceServer(s grpc.ServiceRegistrar, srv DbServiceServer) {
	s.RegisterService(&DbService_ServiceDesc, srv)
}

func _DbService_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databasepb.dbService/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).Select(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databasepb.dbService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databasepb.dbService/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetMessage(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetUnviewedMessagesForReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnviewedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetUnviewedMessagesForReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databasepb.dbService/GetUnviewedMessagesForReminders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetUnviewedMessagesForReminders(ctx, req.(*GetUnviewedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_LogReminderSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).LogReminderSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databasepb.dbService/LogReminderSent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).LogReminderSent(ctx, req.(*LogReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetReminderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReminderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetReminderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databasepb.dbService/GetReminderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetReminderHistory(ctx, req.(*GetReminderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbService_ServiceDesc is the grpc.ServiceDesc for DbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "databasepb.dbService",
	HandlerType: (*DbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Select",
			Handler:    _DbService_Select_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _DbService_Insert_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _DbService_GetMessage_Handler,
		},
		{
			MethodName: "GetUnviewedMessagesForReminders",
			Handler:    _DbService_GetUnviewedMessagesForReminders_Handler,
		},
		{
			MethodName: "LogReminderSent",
			Handler:    _DbService_LogReminderSent_Handler,
		},
		{
			MethodName: "GetReminderHistory",
			Handler:    _DbService_GetReminderHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database.proto",
}
