{
    "schemes": [
        "https",
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Secure password sharing service that allows users to submit encrypted messages and share them through unique, one-time access URLs.\nThe service provides optional email notifications and passphrase protection for enhanced security.",
        "title": "Password Exchange API",
        "contact": {
            "name": "Password Exchange Support",
            "url": "https://github.com/Anthony-Bible/password-exchange"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "host": "password.exchange",
    "basePath": "/api/v1",
    "paths": {
        "/health": {
            "get": {
                "description": "Returns the health status of the API and its dependencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utility"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service health status",
                        "schema": {
                            "$ref": "#/definitions/models.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "description": "Returns information about the API including available endpoints and features",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utility"
                ],
                "summary": "API information",
                "responses": {
                    "200": {
                        "description": "API information",
                        "schema": {
                            "$ref": "#/definitions/models.APIInfoResponse"
                        }
                    }
                }
            }
        },
        "/messages": {
            "post": {
                "description": "Creates a new encrypted message that can be accessed via a unique URL. Optionally sends email notifications to the recipient.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Submit a new message",
                "parameters": [
                    {
                        "description": "Message submission request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MessageSubmissionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message successfully created",
                        "schema": {
                            "$ref": "#/definitions/models.MessageSubmissionResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Anti-spam verification failed",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "get": {
                "description": "Retrieves information about a message including whether it exists, requires a passphrase, and has been accessed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Get message access information",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "byte",
                        "description": "Base64-encoded decryption key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message information retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.MessageAccessInfoResponse"
                        }
                    },
                    "404": {
                        "description": "Message not found or expired",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    }
                }
            }
        },
        "/messages/{id}/decrypt": {
            "post": {
                "description": "Decrypts and retrieves the message content. This is a one-time operation that will delete the message after successful decryption.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Decrypt a message",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Decryption request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MessageDecryptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully decrypted",
                        "schema": {
                            "$ref": "#/definitions/models.MessageDecryptResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid passphrase",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Message not found or expired",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    },
                    "410": {
                        "description": "Message already consumed",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.StandardErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIInfoResponse": {
            "type": "object",
            "properties": {
                "documentation": {
                    "type": "string"
                },
                "endpoints": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.MessageAccessInfoResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "expiresAt": {
                    "type": "string"
                },
                "hasBeenAccessed": {
                    "type": "boolean"
                },
                "messageId": {
                    "type": "string"
                },
                "requiresPassphrase": {
                    "type": "boolean"
                }
            }
        },
        "models.MessageDecryptRequest": {
            "type": "object",
            "required": [
                "decryptionKey"
            ],
            "properties": {
                "decryptionKey": {
                    "type": "string"
                },
                "passphrase": {
                    "type": "string"
                }
            }
        },
        "models.MessageDecryptResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "decryptedAt": {
                    "type": "string"
                },
                "messageId": {
                    "type": "string"
                }
            }
        },
        "models.MessageSubmissionRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "additionalInfo": {
                    "type": "string"
                },
                "antiSpamAnswer": {
                    "type": "string"
                },
                "content": {
                    "type": "string",
                    "maxLength": 10000,
                    "minLength": 1
                },
                "passphrase": {
                    "type": "string",
                    "maxLength": 500
                },
                "recipient": {
                    "$ref": "#/definitions/models.Recipient"
                },
                "sendNotification": {
                    "type": "boolean"
                },
                "sender": {
                    "$ref": "#/definitions/models.Sender"
                }
            }
        },
        "models.MessageSubmissionResponse": {
            "type": "object",
            "properties": {
                "decryptUrl": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "messageId": {
                    "type": "string"
                },
                "notificationSent": {
                    "type": "boolean"
                },
                "webUrl": {
                    "type": "string"
                }
            }
        },
        "models.Recipient": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "models.Sender": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "models.StandardErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    }
}