load("@rules_python//python:defs.bzl", "py_library")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//python3:image.bzl", "py3_image")
load("@pip//:requirements.bzl", "all_whl_requirements")
load("@rules_python//gazelle/manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python//gazelle/modules_mapping:def.bzl", "modules_mapping")
load("@io_bazel_rules_docker//docker/package_managers:download_pkgs.bzl", "download_pkgs")
load("@io_bazel_rules_docker//docker/package_managers:install_pkgs.bzl", "install_pkgs")

# This rule fetches the metadata for python packages we depend on. That data is
# required for the gazelle_python_manifest rule to update our manifest file.
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    # When using pip_parse instead of pip_install, set the following.
    pip_repository_incremental = True,
    # This is what we called our `pip_install` rule, where third-party
    # python libraries are loaded in BUILD files.
    pip_repository_name = "pip",
    # This should point to wherever we declare our python dependencies
    # (the same as what we passed to the modules_mapping rule in WORKSPACE)
    requirements = ":requirements.txt",
)

py_library(
    name = "slackbot",
    srcs = [
        "database.py",
        "encryptionClient.py",
        "program.py",
    ],
    imports = [".."],
    srcs_version = "PY3",
    visibility = ["//:__subpackages__"],
    deps = [
        "//protos:encryptionpb_grpc_py_library",
        "//protos:databasepb_grpc_py_library",
        "@pip//pypi__flask",
        "@pip//pypi__grpcio",
        "@pip//pypi__mysqlclient",
        "@pip//pypi__protobuf",
        "@pip//pypi__slack_bolt",
        "@pip//pypi__slack_sdk",
        "@pip//pypi__sqlalchemy",
    ],
)

container_image(
    name = "python38_base_image",
    base = "@python3_linux_amd64//image",
    # slim-buster image places python3 under /usr/local/bin, but the host
    # toolchain used by py3_image might use /usr/bin instead.
    symlinks = {
        "/usr/bin/python": "/usr/local/bin/python",
        "/usr/bin/python3": "/usr/local/bin/python3",
    },
)

# See https://github.com/bazelbuild/rules_docker/blob/master/testing/examples/run_instruction_apt_pkgs/BUILD
download_pkgs(
    name = "mysql_pkg",
    image_tar = ":python38_base_image.tar",
    packages = [
        "default-libmysqlclient-dev",
    ],
)

install_pkgs(
    name = "mysql_pkg_image",
    image_tar = ":python38_base_image.tar",
    installables_tar = ":mysql_pkg.tar",
    installation_cleanup_commands = "rm -rf /var/lib/apt/lists/*",
    output_image_name = "mysql_pkg_image",
)

py3_image(
    name = "slackbot_bin",
    srcs = ["program.py"],
    base = ":mysql_pkg_image",
    main = "program.py",
    srcs_version = "PY3",
    visibility = ["//visibility:public"],
    deps = [":slackbot"],
)
